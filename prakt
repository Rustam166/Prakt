namespace AnimalCareApp
{
    public class Animal
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public int Count { get; set; }
        public bool IsFed { get; set; }
        public bool IsVaccinated { get; set; }
        public bool IsHealthy { get; set; }

        public Animal() { }

        public Animal(string name, int count)
        {
            Name = name;
            Count = count;
            IsFed = false;
            IsVaccinated = false;
            IsHealthy = true;
        }
    }
}
using System;
using Xamarin.Forms;
using Xamarin.Forms.Xaml;

namespace AnimalCareApp
{
    public partial class App : Application
    {
        public App()
        {
            InitializeComponent();

            MainPage = new MainPage();
        }

        protected override void OnStart()
        {
        }

        protected override void OnSleep()
        {
        }

        protected override void OnResume()
        {
        }
    }
}
using Microsoft.Data.SqlClient;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace AnimalCareApp
{
    public class DatabaseService
    {
        private readonly string _connectionString;

        public DatabaseService()
        {
            _connectionString = @"Data Source=26.161.119.126,1488;Initial Catalog=animal;User Id=sa;Password=12345;";
        }

        public async Task TestConnectionAsync()
        {
            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                await con.OpenAsync();
                Console.WriteLine("Успешное подключение к базе данных!");
            }
        }

        public async Task<List<Animal>> GetAnimalsAsync()
        {
            var animals = new List<Animal>();
            string query = "SELECT Id, Name, Count, IsFed, IsVaccinated, IsHealthy FROM Animals";

            using (SqlConnection con = new SqlConnection(_connectionString))
            {
                await con.OpenAsync();
                using (SqlCommand cmd = new SqlCommand(query, con))
                {
                    using (SqlDataReader reader = await cmd.ExecuteReaderAsync())
                    {
                        while (await reader.ReadAsync())
                        {
                            animals.Add(new Animal
                            {
                                Id = reader.GetInt32(0),
                                Name = reader.GetString(1),
                                Count = reader.GetInt32(2),
                                IsFed = reader.GetBoolean(3),
                                IsVaccinated = reader.GetBoolean(4),
                                IsHealthy = reader.GetBoolean(5),
                            });
                        }
                    }
                }
            }

            return animals;
        }
    }
}
using System;

namespace AnimalCareApp
{
    public class HistoryRecord
    {
        public int Id { get; set; }
        public string Action { get; set; }
        public DateTime Timestamp { get; set; }
    }
}
using System.ComponentModel;
using System.Runtime.CompilerServices;

namespace AnimalCareApp
{
    public class Inventory : INotifyPropertyChanged
    {
        public int Id { get; set; }

        private int _food;
        public int Food
        {
            get => _food;
            set { _food = value; OnPropertyChanged(); }
        }

        private int _medicine;
        public int Medicine
        {
            get => _medicine;
            set { _medicine = value; OnPropertyChanged(); }
        }

        private int _vaccines;
        public int Vaccines
        {
            get => _vaccines;
            set { _vaccines = value; OnPropertyChanged(); }
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             x:Class="AnimalCareApp.MainPage"
             Title="Animal Care App">
    <StackLayout Padding="10">
        <!-- Список животных -->
        <Label Text="Животные" FontSize="Large" HorizontalOptions="Center" />
        <ListView x:Name="AnimalListView" HasUnevenRows="True">
            <ListView.ItemTemplate>
                <DataTemplate>
                    <ViewCell>
                        <StackLayout Orientation="Horizontal" Padding="5">
                            <Label Text="{Binding Name}" FontSize="Medium" WidthRequest="100" />
                            <Label Text="{Binding Count, StringFormat='Кол-во: {0}'}" FontSize="Medium" WidthRequest="100" />
                            <Button Text="Кормить" Clicked="FeedAnimal" />
                            <Button Text="Вакцинировать" Clicked="VaccinateAnimal" />
                            <Button Text="Лечить" Clicked="TreatAnimal" />
                        </StackLayout>
                    </ViewCell>
                </DataTemplate>
            </ListView.ItemTemplate>
        </ListView>

        <!-- Склад -->
        <Label Text="Инвентарь" FontSize="Large" HorizontalOptions="Center" Margin="10,20,10,10" />
        <StackLayout Orientation="Horizontal">
            <Label Text="Еда:" WidthRequest="50" />
            <Entry x:Name="FoodEntry" WidthRequest="50" Keyboard="Numeric" />
            <Label Text="Лекарства:" WidthRequest="80" />
            <Entry x:Name="MedicineEntry" WidthRequest="50" Keyboard="Numeric" />
            <Label Text="Вакцины:" WidthRequest="80" />
            <Entry x:Name="VaccineEntry" WidthRequest="50" Keyboard="Numeric" />
        </StackLayout>
        <Button Text="Обновить Инвентарь" Clicked="UpdateInventory" />

        <!-- Остатки -->
        <StackLayout Orientation="Horizontal" Margin="0,10,0,0">
            <Label Text="Остаток еды:" FontSize="Medium" WidthRequest="100" />
            <Label Text="{Binding Food}" FontSize="Medium" />
            <Label Text="Остаток лекарств:" FontSize="Medium" WidthRequest="130" />
            <Label Text="{Binding Medicine}" FontSize="Medium" />
            <Label Text="Остаток вакцин:" FontSize="Medium" WidthRequest="120" />
            <Label Text="{Binding Vaccines}" FontSize="Medium" />
        </StackLayout>

        <!-- История -->
        <Label Text="История" FontSize="Large" HorizontalOptions="Center" Margin="10,20,10,10" />
        <ListView x:Name="HistoryView" HasUnevenRows="True" />
    </StackLayout>
</ContentPage>
using System;
using System.Collections.Generic;
using System.Linq;
using Xamarin.Forms;

namespace AnimalCareApp
{
    public partial class MainPage : ContentPage
    {
        private List<Animal> animals;
        private Inventory inventory;
        private List<string> history;
        private readonly DatabaseService _database;

        public MainPage()
        {
            InitializeComponent();

            // Инициализация сервиса базы данных
            _database = new DatabaseService();

            // Загрузка данных
            LoadDataAsync();
        }

        private async void LoadDataAsync()
        {
            // Загрузка животных
            animals = await _database.GetAnimalsAsync();
           
                animals = new List<Animal>
                {
                    new Animal("Кошка", 5),
                    new Animal("Собака", 3),
                    new Animal("Кролик", 7),
                    new Animal("Корова", 2),
                    new Animal("Лошадь", 1)
                };

                foreach (var animal in animals)
                {
                    await _database.SaveAnimalAsync(animal);
                }
            

            // Загрузка инвентаря
            inventory = await _database.GetInventoryAsync() ?? new Inventory
            {
                Food = 50,
                Medicine = 20,
                Vaccines = 15
            };

            if (inventory.Id == 0) // Если инвентарь отсутствует в базе
            {
                await _database.SaveInventoryAsync(inventory);
            }

            // Загрузка истории
            history = new List<string>();
            var historyRecords = await _database.GetHistoryAsync();
            foreach (var record in historyRecords)
            {
                history.Add($"{record.Timestamp}: {record.Action}");
            }

            // Привязка данных к интерфейсу
            AnimalListView.ItemsSource = animals;
            BindingContext = inventory;
            HistoryView.ItemsSource = history;
        }

        private async void FeedAnimal(object sender, EventArgs e)
        {
            var button = sender as Button;
            var animal = button?.BindingContext as Animal;

            if (animal == null) return;

            if (inventory.Food > 0)
            {
                inventory.Food--;
                animal.IsFed = true;

                // Обновляем базу данных
                await _database.SaveAnimalAsync(animal);
                await _database.SaveInventoryAsync(inventory);

                LogHistory($"Накормлен {animal.Name}. Использована 1 единица пищи.");
            }
            else
            {
                await DisplayAlert("Ошибка", "Недостаточно продуктов в инвентаре.", "OK");
            }
        }

        private async void VaccinateAnimal(object sender, EventArgs e)
        {
            var button = sender as Button;
            var animal = button?.BindingContext as Animal;

            if (animal == null) return;

            if (inventory.Vaccines > 0)
            {
                inventory.Vaccines--;
                animal.IsVaccinated = true;

                // Обновляем базу данных
                await _database.SaveAnimalAsync(animal);
                await _database.SaveInventoryAsync(inventory);

                LogHistory($"Вакцинирован {animal.Name}. Использована 1 вакцина.");
            }
            else
            {
                await DisplayAlert("Ошибка", "В инвентаре недостаточно вакцин.", "OK");
            }
        }

        private async void TreatAnimal(object sender, EventArgs e)
        {
            var button = sender as Button;
            var animal = button?.BindingContext as Animal;

            if (animal == null) return;

            if (inventory.Medicine > 0)
            {
                inventory.Medicine--;
                animal.IsHealthy = true;

                // Обновляем базу данных
                await _database.SaveAnimalAsync(animal);
                await _database.SaveInventoryAsync(inventory);

                LogHistory($"Вылечен {animal.Name}. Использована 1 единица лекарства.");
            }
            else
            {
                await DisplayAlert("Ошибка", "В инвентаре недостаточно лекарств.", "OK");
            }
        }

        private async void UpdateInventory(object sender, EventArgs e)
        {
            if (int.TryParse(FoodEntry.Text, out int food))
            {
                inventory.Food = food;
            }

            if (int.TryParse(MedicineEntry.Text, out int medicine))
            {
                inventory.Medicine = medicine;
            }

            if (int.TryParse(VaccineEntry.Text, out int vaccines))
            {
                inventory.Vaccines = vaccines;
            }

            // Обновляем базу данных
            await _database.SaveInventoryAsync(inventory);

            LogHistory("Инвентарь обновлен.");
        }

        private async void LogHistory(string action)
        {
            var record = new HistoryRecord { Action = action, Timestamp = DateTime.Now };
            await _database.SaveHistoryAsync(record);

            history.Insert(0, $"{record.Timestamp}: {record.Action}");
            HistoryView.ItemsSource = null;
            HistoryView.ItemsSource = history;
        }
    }
}
